[{"id":1,"description":"Given:\n<code>\n2. public class Threads2 implements Runnable {\n3.\n4. public void run() {\n5. System.out.println(\"run.\");\n6. throw new RuntimeException(\"Problem\");\n7. }\n8. public static void main(String[] args) {\n9. Thread t = new Thread(new Threads2());\n10. t.start();\n11. System.out.println(\"End of method.\");\n12. }\n13.}\n</code>\nWhich two can be results? (Choose two.)\n","explaination":"The order \"Problem\" and \"End of method\" could be unpredictable because it depends on thread scheduler but the above problem will output\n\nEnd of method.\nrun.\nException in thread \"Thread-0\" java.lang.RuntimeException: Problem\nat Threads2.run(Threads2.java:5)\nat java.lang.Thread.run(Unknown Source)\n","options":[{"id":1,"text":"java.lang.RuntimeException: Problem\r\n"},{"id":2,"text":"run.\r\njava.lang.RuntimeException: Problem\r\n"},{"id":3,"text":"End of method.\r\njava.lang.RuntimeException: Problem\r\n"},{"id":4,"text":"End of method.\r\nrun.\r\njava.lang.RuntimeException: Problem\r\n"},{"id":5,"text":"run.\r\njava.lang.RuntimeException: Problem\r\nEnd of method.\r\n"}],"answer":[4,5]},{"id":2,"description":"Which two statements are true? (Choose two.)\n","explaination":"Deadlock describes a situation where two or more threads are blocked forever, waiting for each other.Deadlock occurs when multiple threads need the same locks but obtain them in different order. A Java multithreaded program may suffer from the deadlock condition because the synchronized keyword causes the executing thread to block while waiting for the lock, or monitor, associated with the specified object. Here is an example:\ne.g.\n              <code>\n                          public void method1() {\n                                synchronized(lock1) { ...\n                                  synchronized(lock2) {\n                                   ....\n                                 }\n                          }\n                              \n                          public void method2() {\n                               synchronized(lock2) { ....\n                                  synchronized(lock1) {\n                                   ....\n                                 }\n                          }\n\n\n            </code>\nThe above code executed in multithreaded environment may lead to deadlock, because it may happen one thread has taken lock on \"lock2\" in method 2 and waiting to aquire lock on \"lock1\" which is already taken by Thread 2 while calling method1 and waiting to aquire lock2.","options":[{"id":1,"text":"It is possible for more than two threads to deadlock at once."},{"id":2,"text":"The JVM implementation guarantees that multiple threads cannot enter into a deadlocked state."},{"id":3,"text":"If a piece of code is capable of deadlocking, you cannot eliminate the possibility of deadlocking by\r\ninserting\r\ninvocations of Thread.yield().\r\n"},{"id":4,"text":"Deadlocking can occur only when the wait(), notify(), and notifyAll() methods are used incorrectly."},{"id":5,"text":"It is possible for a single-threaded application to deadlock if synchronized blocks are used incorrectly."}],"answer":[1,3]},{"id":3,"description":"Given:\n<code>\nvoid waitForSignal() {\nObject obj = new Object();\nsynchronized (Thread.currentThread()) {\nobj.wait();\nobj.notify();\n}\n}\n</code>\nWhich statement is true?\n","explaination":"The wait() method causes the current thread to wait until another thread invokes the notify() or notifyAll() method for this object.The wait, notify & notifyAll methods must be called within synchronized block or method. Note, wait, notify & notifyAll are definied inside Object class and not in Thread class. Lets find out how it works.\n\n<code>\n      synchronized(object) {\n\t   object.wait();\n      }\n</code>\nWhile executing above code by <code>Thread-1</code>, \n1. <code>Thread-1</code> holds lock on <code>object</code>.\n2. call to <code>object.wait()</code> forces <code>Thread-1</code> to release lock on object and sends the <code>Thread-1</code> into wait state.\n\n<code>\n      synchronized(object) {\n\t   object.notify();\n      }\n</code>\nWhile executing above code by <code>Thread-2</code>, \n1. <code>Thread-2</code> holds lock on <code>object</code> because <code>Thread-1</code> has released and now waiting for someone to call notify or notifyAll.\n2. call to <code>object.nofity()</code> forces <code>Thread-2</code> to release lock on object and wake up anyone from object's wait state i.e. <code>Thread-1</code>  ","options":[{"id":1,"text":"Reversing the order of obj.wait() and obj.notify() might cause this method to complete normally."},{"id":2,"text":"This code does NOT compile unless \"obj.wait()\" is replaced with \"((Thread) obj).wait()\"."},{"id":3,"text":"This code can throw an IllegalMonitorStateException."},{"id":4,"text":"A call to notify() or notifyAll() from another thread might cause this method to complete normally."},{"id":5,"text":"Code will compile and execute without any issue"}],"answer":[3]},{"id":4,"description":"What is the output if the main() method is run?\n<code>\n\n1. public class Starter extends Thread {\n2. private int x = 2;\n3. public static void main(String[] args) throws Exception {\n4. new Starter().makeItSo();\n5. }\n6. public Starter(){\n7. x = 5;\n8. start();\n9. }\n10. public void makeItSo() throws Exception {\n11. join();\n12. x = x - 1;\n13. System.out.println(x);\n14. }\n15. public void run() { x *= 2; }\n16.}\n</code>\n","explaination":"Nothing wrong with the code. It will execute properly and output 9","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"An exception is thrown at runtime."},{"id":3,"text":"It is impossible to determine for certain."},{"id":4,"text":"9"},{"id":5,"text":"8"}],"answer":[4]},{"id":5,"description":"Given: \nWhat will be the output of below program\n<code>\npublic static void main(String[] args) {\n\t\t\n\t\ttry {\n\t\t\tSystem.exit(0);\n\t\t} catch (Error t) {\n\t\t\tSystem.out.println(\"Exception\");\n\t\t} finally {\n\t\t\tSystem.out.println(\"finally\");\n\t\t}\n\t}\n</code>","explaination":"If the JVM exits while the try or catch code is being executed, then the finally block may not execute. Likewise, if the thread executing the try or catch code is interrupted or killed, the finally block may not execute even though the application as a whole continues.\n","options":[{"id":1,"text":"Exception"},{"id":2,"text":"finally"},{"id":3,"text":"Exception\r\nfinally"},{"id":4,"text":"No output"},{"id":5,"text":"Compilation Error"}],"answer":[4]},{"id":6,"description":"Given:\n<code>\n1. public class Threads4 {\n2. public static void main (String[] args) {\n3. new Threads4().go();\n4. }\n5. public void go() {\n6. Runnable r = new Runnable() {\n7. public void run() {\n8. System.out.print(\"foo\");\n9. }\n10. };\n11. Thread t = new Thread(r);\n12. t.start();\n13. t.start();\n14. }\n15.}\n</code>\nWhat is the result?\n","explaination":"One cannot execute the same thread again once started. So calling t.start twice will throw IllegalThreadStateException.\n\nfooException in thread \"main\" java.lang.IllegalThreadStateException\nat java.lang.Thread.start(Unknown Source)\nat p6.Threads4.go(Threads4.java:15)\nat p6.Threads4.main(Threads4.java:5)\n","options":[{"id":1,"text":"Compilation fails"},{"id":2,"text":"An exception is thrown at runtime."},{"id":3,"text":"The code executes normally and prints \"foo\"."},{"id":4,"text":"The code executes normally, but nothing is printed."},{"id":5,"text":""}],"answer":[2]},{"id":7,"description":"Given:\n<code>\n1. public abstract class Shape {\n2. private int x;\n3. private int y;\n4. public abstract void draw();\n5. public void setAnchor(int x, int y) {\n6. this.x = x;\n7. this.y = y;\n8. }\n9. }\n</code>\nWhich two classes use the Shape class correctly? (Choose two.)\n","explaination":"1) One can only extend abstract class and not implement. \n2) Its not mandatory to implement all methods in Interface in an abstract class. \nso only 2 & 4 options are correct.\n","options":[{"id":1,"text":"<code>public class Circle implements Shape {\r\nprivate int radius;\r\n}\r\n</code>"},{"id":2,"text":"<code>public abstract class Circle extends Shape {\r\nprivate int radius;\r\n}\r\n</code>"},{"id":3,"text":"<code>public class Circle extends Shape {\r\nprivate int radius;\r\npublic void draw();\r\n}\r\n</code>"},{"id":4,"text":"<code>public class Circle extends Shape {\r\nprivate int radius;\r\npublic void draw() {/* code here */}\r\n}\r\n</code>"},{"id":5,"text":"<code>public abstract class Circle implements Shape {\r\nprivate int radius;\r\npublic void draw() {/* code here */}\r\n}\r\n</code>"}],"answer":[2,4]},{"id":8,"description":"Given:\n<code>\n1. public class Barn {\n2. public static void main(String[] args) {\n3. new Barn().go(\"hi\", 1);\n4. new Barn().go(\"hi\", \"world\", 2);\n5. }\n6. public void go(String... y, int x) {\n7. System.out.print(y[y.length - 1] + \" \");\n8. }\n9. }\n</code>\nWhat is the result?\n","explaination":"Compilaton will fail because the variable argument type i.e. String... shuld be last parameter in a method singnature.","options":[{"id":1,"text":"hi hi"},{"id":2,"text":"hi world"},{"id":3,"text":"world world"},{"id":4,"text":"Compilation fails."},{"id":5,"text":"An exception is thrown at runtime."}],"answer":[4]},{"id":9,"description":"Given:\n<code>\n1. class Nav{\n2. public enum Direction { NORTH, SOUTH, EAST, WEST }\n3. }\n1. public class Sprite{\n2. // insert code here\n3. }\nWhich code, inserted at line 14, allows the Sprite class to compile?\nA. Direction d = NORTH;\nB. Nav.Direction d = NORTH;\nC. Direction d = Direction.NORTH;\nD. Nav.Direction d = Nav.Direction.NORTH;\n</code>\nWhich code, inserted at line 14, allows the Sprite class to compile?","explaination":"The Direction enum defined inside Nav class and only way to access it through Nav i.e. Nav.Direction","options":[{"id":1,"text":"Direction d = NORTH;"},{"id":2,"text":"Nav.Direction d = NORTH;"},{"id":3,"text":"Direction d = Direction.NORTH;"},{"id":4,"text":"Nav.Direction d = Nav.Direction.NORTH;"},{"id":5,"text":""}],"answer":[4]},{"id":10,"description":"Which statement is true about the classes and interfaces shown below?\n<code>\n1. public interface A {\n2. public void doSomething(String thing);\n3. }\n1. public class AImpl implements A {\n2. public void doSomething(String msg) {}\n3. }\n1. public class B {\n2. public A doit(){\n3. //more code here\n4. }\n5. public String execute(){\n6. //more code here\n7. }\n8. }\n1. public class C extends B {\n2. public AImpl doit(){\n3. //more code here\n4. }\n5.\n6. public Object execute() {\n7. //more code here\n8. }\n9. }\n<code>","explaination":"The above code will fail to compile because, B.execute()'s return type String is not compatible with C.execute()'s Object return type.\nThe ability of a subclass to override a method allows a class to inherit from a superclass whose behavior is \"close enough\" and then to modify behavior as needed. The overriding method has the same name, number and type of parameters, and return type as the method that it overrides. An overriding method can also return a subtype of the type returned by the overridden method. This subtype is called a covariant return type. - oracle java doc.\n","options":[{"id":1,"text":"Compilation will succeed for all classes and interfaces."},{"id":2,"text":"Compilation of class C will fail because of an error in line 2."},{"id":3,"text":"Compilation of class C will fail because of an error in line 6."},{"id":4,"text":"Compilation of class AImpl will fail because of an error in line 2."},{"id":5,"text":""}],"answer":[3]},{"id":11,"description":"What is the result?\n<code>\n11. public class Person {\n12. String name = \"No name\";\n13. public Person(String nm) { name = nm; }\n14. }\n15.\n16. public class Employee extends Person {\n17. String empID = \"0000\";\n18. public Employee(String id) { empID = id; }\n19. }\n20.\n21. public class EmployeeTest {\n22. public static void main(String[] args){\n23. Employee e = new Employee(\"4321\");\n24. System.out.println(e.empID);\n25. }\n26. }\n</code>","explaination":"Compilation fails because there is no default constructor definied in the Person class and Employee's constructor has not invoked super(id).\nJava compiler only inserts default constructor when there are no constructors defined in the class and by default, parameterized child class constructor invokes no-argument base class constructor. To avoid compilation error introduce call to super(id) in the Employee(string) constructor. Note - call to super should be first line in the constructor code.\n<code>\npublic Employee(String id) {\nsuper(id);\nempID = id;\n}\n<code>","options":[{"id":1,"text":"4321"},{"id":2,"text":"0000"},{"id":3,"text":"An exception is thrown at runtime."},{"id":4,"text":"Compilation fails because of an error in line 18."},{"id":5,"text":""}],"answer":[4]},{"id":12,"description":"Given:\n<code>\n1. public class Rainbow {\n2. public enum MyColor {\n3. RED(0xff0000), GREEN(0x00ff00), BLUE(0x0000ff);\n4. private final int rgb;\n5. MyColor(int rgb) { this.rgb = rgb; }\n6. public int getRGB() { return rgb; }\n7. };\n8. public static void main(String[] args) {\n9. //insert code here\n10. }\n11.}\n</code>\nWhich code fragment, inserted at line 19, allows the Rainbow class to compile?\n","explaination":"Syntactically, only option 2 is correct rest has all compilation issues","options":[{"id":1,"text":"MyColor skyColor = BLUE;"},{"id":2,"text":"MyColor treeColor = MyColor.GREEN;"},{"id":3,"text":"if(RED.getRGB() < BLUE.getRGB()) { }"},{"id":4,"text":"Compilation fails due to other error(s) in the code."},{"id":5,"text":"MyColor purple = new MyColor(0xff00ff);"}],"answer":[2]},{"id":13,"description":"Given:\n<code>\n1. public class Mud {\n2. //insert code here\n3. System.out.println(\"hi\");\n4. }\n5. }\nAnd the following five fragments:\npublic static void main(String...a) {\npublic static void main(String.* a) {\npublic static void main(String... a) {\npublic static void main(String[]... a) {\npublic static void main(String...[] a) {\n</code>\nHow many of the code fragments, inserted independently at line 2, compile?\n","explaination":"Java doesnt support * and three dots in vararg variable declaration should be immediately after type name.\nbelow are the valid syntax.\npublic static void main(String...a)\npublic static void main(String... a)\npublic static void main(String...[] a)","options":[{"id":1,"text":"0"},{"id":2,"text":"1"},{"id":3,"text":"2"},{"id":4,"text":"3"},{"id":5,"text":"4"}],"answer":[4]},{"id":14,"description":"Given:\n<code>\nclass Atom {\n\tAtom() {\n\t\tSystem.out.print(\"atom \");\n\t}\n}\n\nclass Rock extends Atom {\n\tRock(String type) {\n\t\tSystem.out.print(type);\n\t}\n}\n\npublic class Mountain extends Rock {\n\tMountain() {\n\t\tsuper(\"granite \");\n\t\tnew Rock(\"granite \");\n\t}\n\n\tpublic static void main(String... ar) {\n\t\tnew Mountain();\n\t}\n}\n</code>\nWhat is the result?\n","explaination":"Code will compile and execute properly with below output\n\natom granite atom granite ","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"atom granite"},{"id":3,"text":"granite granite"},{"id":4,"text":"atom granite atom granite "},{"id":5,"text":"An exception is thrown at runtime."}],"answer":[4]},{"id":15,"description":"Please select which of the following events will cause a thread to move from the Waiting state directly to the Runnable state?\n","explaination":"A Thread arrives in the Waiting state when it executes the wait () method on a target object / monitor. The wait () method is a method of the Object class. Every object can have a list of threads that are waiting for a notification from the object. When a Thread is waiting, it will NOT execute any further instructions until the notify () method of the target object is invoked. \n\nIf many threads are waiting on the same object, only one thread will be chosen to proceed to the Runnable state for execution when a notify () is invoked. There is no guarantee which particular thread will be invoked, as their order is NOT guaranteed. However, if there are no threads waiting when the notify () is invoked, no action will be taken. \n","options":[{"id":1,"text":"The Object.notify () method is invoked on the monitor on which the thread is waiting "},{"id":2,"text":"The start () method is invoked on the Thread object "},{"id":3,"text":"The resume () method is invoked on the Thread object "},{"id":4,"text":"The run () method is invoked on the Thread object "},{"id":5,"text":"None of the choices are correct "}],"answer":[1]},{"id":16,"description":"The class Hashtable is used to implement which collection interface. Select the one correct answer. \n","explaination":"Hashtable implements Map Interface. There is no Table interface and HashMap is a concrete class.","options":[{"id":1,"text":"Table"},{"id":2,"text":"List"},{"id":3,"text":"Map"},{"id":4,"text":"HashMap"},{"id":5,"text":"Collection"}],"answer":[3]},{"id":17,"description":"\nWhat is the default priority of a newly created thread in Hotspot JVM.\n","explaination":"A Thread inherites the priority from the parent thread. The default priority is defined in Thread class as Thread.NORM_PRIORITY. which is 5.\n","options":[{"id":1,"text":"1"},{"id":2,"text":"4"},{"id":3,"text":"10"},{"id":4,"text":"0"},{"id":5,"text":"A thread takes the priority of its parent thread."}],"answer":[5]},{"id":18,"description":"Given a correctly compiled class whose source code is:\n<code>\n1. package com.sun.sjcp;\n2.\n3. public class Commander {\n4. public static void main(String[] args) {\n5. // more code here\n6. }\n7. }\n</code>\nAssume that the class file is located in /foo/com/sun/sjcp/, the current directory is /foo/, and that the\nclasspath contains \".\" (current directory). Which command line correctly runs Commander?\n","explaination":"","options":[{"id":1,"text":"java Commander"},{"id":2,"text":"java com.sun.sjcp.Commander"},{"id":3,"text":"java com/sun/sjcp/Commander"},{"id":4,"text":"java -cp com.sun.sjcp Commander"},{"id":5,"text":"java -cp com/sun/sjcp Commander"}],"answer":[2]},{"id":19,"description":"A class games.cards.Poker is correctly defined in the jar file Poker.jar.\nA user wants to execute the main method of Poker on a UNIX system using the command:\n<code>java games.cards.Poker</code>\nWhat allows the user to do this?\n","explaination":"","options":[{"id":1,"text":"put Poker.jar in directory /stuff/java, and set the CLASSPATH to include /stuff/java"},{"id":2,"text":"put Poker.jar in directory /stuff/java, and set the CLASSPATH to include /stuff/java/*.jar"},{"id":3,"text":"put Poker.jar in directory /stuff/java, and set the CLASSPATH to include /stuff/java/Poker.jar"},{"id":4,"text":"put Poker.jar in directory /stuff/java/games/cards, and set the CLASSPATH to include /stuff/java/*.jar"},{"id":5,"text":"put Poker.jar in directory /stuff/java/games/cards, and set the CLASSPATH to include /stuff/java/Poker.\r\njar\r\n"}],"answer":[3]},{"id":20,"description":"Given:\n<code>\n1. interface DeclareStuff {\n2. public static final int EASY = 3;\n3.\n4. void doStuff(int t);\n5. }\n6.\n7. public class TestDeclare implements DeclareStuff {\n8. public static void main(String[] args) {\n9. int x = 5;\n10. new TestDeclare().doStuff(++x);\n11. }\n12.\n13. void doStuff(int s) {\n14. s += EASY + ++s;\n15. System.out.println(\"s \" + s);\n16. }\n17.}\n</code>\nWhat is the result?\n","explaination":"The methods in interfaces are public by default and implementing classes should declare interface methods as public. The above code throws compilation error because TestDeclare class has not declared doStuff method public.","options":[{"id":1,"text":"s 14"},{"id":2,"text":"s 16"},{"id":3,"text":" s 10"},{"id":4,"text":"Compilation fails."},{"id":5,"text":"An exception is thrown at runtime."}],"answer":[4]},{"id":21,"description":"Given:\n<code>\n1. public class Pass2 {\n2. public void main(String[] args) {\n3. int x = 6;\n4. Pass2 p = new Pass2();\n5. p.doStuff(x);\n6. System.out.print(\" main x = \" + x);\n7. }\n8.\n9. void doStuff(int x) {\n10. System.out.print(\" doStuff x = \" + x++);\n11. }\n12.}\n</code>\nAnd the command-line invocations:\n<code>\njavac Pass2.java\njava Pass2 5\n</code>\nWhat is the result?\n","explaination":"The main method should have \"public static void main(String[]) signature. The above code lacks the valid main method.","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"An exception is thrown at runtime."},{"id":3,"text":"doStuff x = 6 main x = 6"},{"id":4,"text":"doStuff x = 6 main x = 7"},{"id":5,"text":"doStuff x = 7 main x = 6"}],"answer":[2]},{"id":22,"description":"Given:\n<code>\npublic class Spock {\npublic static void main(String[] args) {\nLong tail = 2000L;\nLong distance = 1999L;\nLong story = 1000L;\nif ((tail > distance) ^ ((story * 2) == tail))\nSystem.out.print(\"1\");\nif ((distance + 1 != tail) ^ ((story * 2) == distance))\nSystem.out.print(\"2\");\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"1"},{"id":2,"text":"2"},{"id":3,"text":"12"},{"id":4,"text":"Compilation fails."},{"id":5,"text":"No output is produced."}],"answer":[5]},{"id":23,"description":"Given:\n<code>\n1. public class GC {\n2. private Object o;\n3. private void doSomethingElse(Object obj) { o = obj; }\n4. public void doSomething() {\n5. Object o = new Object();\n6. doSomethingElse(o);\n7. o = new Object();\n8. doSomethingElse(null);\n9. o = null;\n10. }\n11.}\n</code>\nWhen the doSomething method is called, after which line does the Object created in line 5 become\navailable for garbage collection?\n","explaination":"","options":[{"id":1,"text":"Line 5"},{"id":2,"text":"Line 6"},{"id":3,"text":"Line 7"},{"id":4,"text":"Line 8"},{"id":5,"text":"Line 9"}],"answer":[4]},{"id":24,"description":"Given:\n<code>\n1. import java.io.IOException;\n2.\n3. class A {\n4.\n5. public void process() {\n6. System.out.print(\"A,\");\n7. }\n8.\n9. }\n10.\n11.\n12.class B extends A {\n13.\n14. public void process() throws IOException {\n15. super.process();\n16. System.out.print(\"B,\");\n17. throw new IOException();\n18. }\n19.\n20. public static void main(String[] args) {\n21. try {\n22. new B().process();\n23. } catch (IOException e) {\n24. System.out.println(\"Exception\");\n25. }\n26. }\n27.}\n</code>\nWhat is the result?\n","explaination":"Below are the rules for method overriding in handling excceptions.\n1) Rule: If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception. \n2) Rule: If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception but can declare unchecked exception. \n\nIn above code, process method in class B throws IOException which is not decleared in its base method.","options":[{"id":1,"text":"Exception"},{"id":2,"text":"A,B,Exception"},{"id":3,"text":"Compilation fails because of an error in line 20."},{"id":4,"text":"Compilation fails because of an error in line 14."},{"id":5,"text":"A NullPointerException is thrown at runtime."}],"answer":[4]},{"id":25,"description":"Given:\n<code>\npublic static void main(String[] args) {\nString str = \"null\";\nif (str == null) {\nSystem.out.println(\"null\");\n} else (str.length() == 0) {\nSystem.out.println(\"zero\");\n} else {\nSystem.out.println(\"some\");\n}\n}\n</code>\nWhat is the result?\n","explaination":"You cannot have two \"else\" clauses for single \"if\". \"else\" clause refers to immidiate previous \"if\"","options":[{"id":1,"text":"null"},{"id":2,"text":"zero"},{"id":3,"text":"some"},{"id":4,"text":"Compilation fails"},{"id":5,"text":"An exception is thrown at runtime."}],"answer":[4]},{"id":26,"description":"Given:\n<code>\n1. public class Breaker2 {\n2. static String o = \"\";\n3.\n4. public static void main(String[] args) {\n5. z: for (int x = 2; x < 7; x++) {\n6. if (x == 3)\n7. continue;\n8. if (x == 5)\n9. break z;\n10. o = o + x;\n11. }\n12. System.out.println(o);\n13. }\n14.}\n15.\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"2"},{"id":2,"text":"24"},{"id":3,"text":"234"},{"id":4,"text":"246"},{"id":5,"text":"2346"}],"answer":[2]},{"id":27,"description":"Given:\n<code>\nstatic void test() {\ntry {\nString x = null;\nSystem.out.print(x.toString() + \" \");\n} finally {\nSystem.out.print(\"finally \");\n}\n}\npublic static void main(String[] args) {\ntry {\ntest();\n} catch (Exception ex) {\nSystem.out.print(\"exception \");\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"null"},{"id":2,"text":"finally"},{"id":3,"text":"null finally"},{"id":4,"text":"Compilation fails."},{"id":5,"text":"finally exception"}],"answer":[5]},{"id":28,"description":"Given:\n<code>\n1. public class Test {\n2. public enum Dogs {collie, harrier, shepherd};\n3. public static void main(String [] args) {\n4. Dogs myDog = Dogs.shepherd;\n5. switch (myDog) {\n6. case collie:\n7. System.out.print(\"collie \");\n8. case default:\n9. System.out.print(\"retriever \");\n10. case harrier:\n11. System.out.print(\"harrier \");\n12. }\n13. }\n14.}\n</code>\nWhat is the result?\n","explaination":"in switch statement \"default\" cannot be first statement. The above code will output as,\n\nTest.java:10: illegal start of expression\ncase default:\n^\nTest.java:11: : expected\nSystem.out.print(\"retriever \");\n^\n2 errors\n","options":[{"id":1,"text":"harrier"},{"id":2,"text":"shepherd"},{"id":3,"text":"retriever"},{"id":4,"text":"Compilation fails."},{"id":5,"text":"retriever harrier"}],"answer":[4]},{"id":29,"description":"Given:\n<code>\n1. public class Venus {\n2. public static void main(String[] args) {\n3. int[] x = { 1, 2, 3 };\n4. int y[] = { 4, 5, 6 };\n5. new Venus().go(x, y);\n6. }\n7.\n8. void go(int[]... z) {\n9. for (int[] a : z)\n10. System.out.print(a[0]);\n11. }\n12.}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"1"},{"id":2,"text":"12"},{"id":3,"text":"14"},{"id":4,"text":"An exception is thrown at runtime."},{"id":5,"text":"Compilation fails."}],"answer":[3]},{"id":30,"description":"<code>\n1. public class A {\n2. public void method1(){\n3. B b = new B();\n4. b.method2();\n5. // more code here\n6. }\n7. }\n1. public class B{\n2. public void method2() {\n3. C c = new C();\n4. c.method3();\n5. // more code here\n6. }\n7. }\n1. public class C {\n2. public void method3(){\n3. // more code here\n4. }\n5. }\n</code>\n\nGiven\n\n<code>\ntry {\nA a = new A();\na.method1(); // line 27\n} catch (Exception e) {\nSystem.out.print(\"an error occurred\"); // line 29\n}\n</code>\nWhich two statements are true if a NullPointerException is thrown on line 3 of class C? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"The application will crash."},{"id":2,"text":"The code on line 29 will be executed."},{"id":3,"text":"The code on line 5 of class A will execute."},{"id":4,"text":"The code on line 5 of class B will execute."},{"id":5,"text":"The exception will be propagated back to line 27."}],"answer":[2,5]},{"id":31,"description":"Given:\n<code>\n1. public class Mule {\n2. public static void main(String[] args) {\n3. boolean assert = true;\n4. if(assert) {\n5. System.out.println(\"assert is true\");\n6. }\n7. }\n8. }\n</code>\nWhich command-line invocations will compile?\n","explaination":"assert is the keyword from jdk 1.4","options":[{"id":1,"text":"javac Mule.java"},{"id":2,"text":"javac -source 1.3 Mule.java"},{"id":3,"text":"javac -source 1.4 Mule.java"},{"id":4,"text":" javac -source 1.5 Mule.java"},{"id":5,"text":""}],"answer":[2]},{"id":32,"description":"Given:\n<code>\n1. class A {\n2. void foo() throws Exception {\n3. throw new Exception();\n4. }\n5. }\n6.\n7. class SubB2 extends A {\n8. void foo() {\n9. System.out.println(\"B \");\n10. }\n11.}\n12.class Tester {\n13. public static void main(String[] args) {\n14. A a = new SubB2();\n15. a.foo();\n16. }\n17.}\n</code>\nWhat is the result?\n","explaination":"The above code will fail in compilation becase, the \"foo\" method throws exeception which is not handles in \"main\" method. ","options":[{"id":1,"text":"B"},{"id":2,"text":"B, followed by an Exception"},{"id":3,"text":"Compilation fails due to an error on line 9."},{"id":4,"text":"Compilation fails due to an error on line 15."},{"id":5,"text":"An Exception is thrown with no other output"}],"answer":[4]},{"id":33,"description":"Given:\n<code>\n1. import java.util.*;\n2.\n3. public class LetterASort {\n4. public static void main(String[] args) {\n5. ArrayList<String> strings = new ArrayList<String>();\n6. strings.add(\"aAaA\");\n7. strings.add(\"AaA\");\n8. strings.add(\"aAa\");\n9. strings.add(\"AAaa\");\n10. Collections.sort(strings);\n11. for (String s : strings) {\n12. System.out.print(s + \" \");\n13. }\n14. }\n15.}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"aAaA aAa AAaa AaA"},{"id":3,"text":"AAaa AaA aAa aAaA"},{"id":4,"text":"AaA AAaa aAaA aAa"},{"id":5,"text":"An exception is thrown at runtime."}],"answer":[3]},{"id":34,"description":"Given:\n<code>\n1. import java.util.*;\n2.\n3. public class Explorer3 {\n4. public static void main(String[] args) {\n5. TreeSet<Integer> s = new TreeSet<Integer>();\n6. TreeSet<Integer> subs = new TreeSet<Integer>();\n7. for (int i = 606; i < 613; i++)\n8. if (i % 2 == 0)\n9. s.add(i);\n10. subs = (TreeSet) s.subSet(608, true, 611, true);\n11. subs.add(629);\n12. System.out.println(s + \" \" + subs);\n13. }\n14.}\n</code>\nWhat is the result?\n","explaination":"The code will throw runtime exception as below,\n\nException in thread \"main\" java.lang.IllegalArgumentException: key out of\nrange\nat java.util.TreeMap$NavigableSubMap.put(TreeMap.java:1386)\nat java.util.TreeSet.add(TreeSet.java:238)\nat Explorer3.main(Explorer3.java:11)\n","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"An exception is thrown at runtime."},{"id":3,"text":"[608, 610, 612, 629] [608, 610]"},{"id":4,"text":"[608, 610, 612, 629] [608, 610, 629]"},{"id":5,"text":"[606, 608, 610, 612, 629] [608, 610, 629]"}],"answer":[2]},{"id":35,"description":"Given a class whose instances, when found in a collection of objects, are sorted by using the compareTo()\nmethod, which two statements are true? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"The class implements java.lang.Comparable."},{"id":2,"text":"The class implements java.util.Comparator."},{"id":3,"text":"The interface used to implement sorting allows this class to define only one sort sequence."},{"id":4,"text":"The interface used to implement sorting allows this class to define many different sort sequences."},{"id":5,"text":""}],"answer":[1,3]},{"id":36,"description":"A programmer has an algorithm that requires a java.util.List that provides an efficient implementation of add\n(0, object), but does NOT need to support quick random access.\nWhat supports these requirements?\n","explaination":"There is no LinearList, ArrayList provides good random access but inefficient in addition, Queue allows addition and retrival at top.\nLinkedList is efficient if there are many additions and removal.","options":[{"id":1,"text":"java.util.Queue"},{"id":2,"text":"java.util.ArrayList"},{"id":3,"text":"java.util.LinearList"},{"id":4,"text":"java.util.LinkedList"},{"id":5,"text":""}],"answer":[4]},{"id":37,"description":"Given:\n<code>\nimport java.util.*;\npublic class Hancock {\n// insert code here Linea 5\nlist.add(\"foo\");\n}\n}\n</code>\nWhich two code fragments, inserted independently at line 5, will compile without warnings? (Choose All that apply.)\n","explaination":"List<? extends String> doesn't allow add.","options":[{"id":1,"text":"public void addStrings(List list) {"},{"id":2,"text":"public void addStrings(List<String> list) {"},{"id":3,"text":"public void addStrings(List<? super String> list) {"},{"id":4,"text":"public void addStrings(List<? extends String> list) {"},{"id":5,"text":""}],"answer":[1,2,3]},{"id":38,"description":"Given:\n<code>\npublic class Person {\nprivate String name, comment;\nprivate int age;\npublic Person(String n, int a, String c) {\nname = n;\nage = a;\ncomment = c;\n}\npublic boolean equals(Object o) {\nif (!(o instanceof Person))\nreturn false;\nPerson p = (Person) o;\nreturn age == p.age && name.equals(p.name);\n}\n}\n</code>\nWhat is the appropriate definition of the hashCode method in class Person?\n","explaination":"","options":[{"id":1,"text":"return super.hashCode();"},{"id":2,"text":"return name.hashCode() + age * 7;"},{"id":3,"text":"return name.hashCode() + comment.hashCode() / 2;"},{"id":4,"text":"return name.hashCode() + comment.hashCode() / 2 - age * 3;"},{"id":5,"text":""}],"answer":[2]},{"id":39,"description":"Given\n<code>\n1. import java.util.*;\n2. public class TestSet{\n3. enum Example {ONE, TWO, THREE }\n4. public static void main(String[] args) {\n5. Collection coll = new ArrayList();\n6. coll.add(Example.THREE);\n7. coll.add(Example.THREE);\n8. coll.add(Example.THREE);\n9. coll.add(Example.TWO);\n10. coll.add(Example.TWO);\n11. coll.add(Example.ONE);\n12. Set set = new HashSet(coll);\n13. }\n14.}\n</code>\nWhich statement is true about the set variable on line 12?\n","explaination":"","options":[{"id":1,"text":"The set variable contains all six elements from the coll collection, and the order is guaranteed to be\r\npreserved.\r\n"},{"id":2,"text":"he set variable contains only three elements from the coll collection, and the order is guaranteed to be\r\npreserved.\r\n"},{"id":3,"text":"The set variable contains all six elements from the coll collection, but the order is NOT guaranteed to be\r\npreserved.\r\n"},{"id":4,"text":"The set variable contains only three elements from the coll collection, but the order is NOT guaranteed\r\nto be preserved.\r\n"},{"id":5,"text":""}],"answer":[4]},{"id":40,"description":"Given\n<code>\n1. public class Car {\n2. private int wheelCount;\n3. private String vin;\n4. public Car(String vin){\n5. this.vin = vin;\n6. this.wheelCount = 4;\n7. }\n8. public String drive(){\n9. return \"zoom-zoom\";\n10. }\n11. public String getInfo() {\n12. return \"VIN: \" + vin + \" wheels: \" + wheelCount;\n13. }\n14.}\nAnd\n1. public class MeGo extends Car {\n2. public MeGo(String vin) {\n3. this.wheelCount = 3;\n4. }\n5. }\n<code>\nWhat two must the programmer do to correct the compilation errors? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"insert a call to this() in the Car constructor"},{"id":2,"text":"insert a call to this() in the MeGo constructor"},{"id":3,"text":"insert a call to super() in the MeGo constructor"},{"id":4,"text":"insert a call to super(vin) in the MeGo constructor"},{"id":5,"text":"change the wheelCount variable in Car to protected"}],"answer":[4,5]},{"id":41,"description":"Which three statements are true? (Choose three.)\n","explaination":"","options":[{"id":1,"text":"A protected method in class X can be overridden by any subclass of X."},{"id":2,"text":"A non-static public final method in class X can be overridden in any subclass of X."},{"id":3,"text":"A public static method in class X can be called by a subclass of X without explicitly referencing the class\r\nX.\r\n"},{"id":4,"text":"A method with the same signature as a private final method in class X can be implemented in a\r\nsubclass of X.\r\n"},{"id":5,"text":"A protected method in class X can be overridden by a subclass of X only if the subclass is in the same\r\npackage as X.\r\n"}],"answer":[1,3,4]},{"id":42,"description":"Given:\nclass Pizza {\njava.util.ArrayList toppings;\npublic final void addTopping(String topping) {\ntoppings.add(topping);\n}\npublic void removeTopping(String topping) {\ntoppings.remove(topping);\n}\n}\npublic class PepperoniPizza extends Pizza {\npublic void addTopping(String topping) {\nSystem.out.println(\"Cannot add Toppings\");\n}\npublic static void main(String[] args) {\nPizza pizza = new PepperoniPizza();\npizza.addTopping(\"Mushrooms\");\npizza.removeTopping(\"Peperoni\");\n}\n}\nWhat is the result?\n","explaination":"You cannot override final method.","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"Cannot add Toppings"},{"id":3,"text":"The code runs with no output."},{"id":4,"text":"A NullPointerException is thrown in Line 4."},{"id":5,"text":""}],"answer":[1]},{"id":43,"description":"Given that:\nGadget has-a Sprocket and Gadget has-a Spring and Gadget is-a Widget and Widget has-a Sprocket\nWhich two code fragments represent these relationships? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"class Widget {\r\nSprocket s;\r\n}\r\nclass Gadget extends Widget {\r\nSpring s;\r\n}\r\n"},{"id":2,"text":"class Widget {\r\n}\r\nclass Gadget extends Widget {\r\nSpring s1;\r\nSprocket s2;\r\n}\r\n"},{"id":3,"text":"class Widget {\r\nSprocket s1;\r\nSpring s2;\r\n}\r\nclass Gadget extends Widget {\r\n}\r\n"},{"id":4,"text":"class Gadget {\r\nSpring s;\r\n}\r\nclass Widget extends Gadget {\r\nSprocket s;\r\n}\r\n"},{"id":5,"text":"class Gadget {\r\n}\r\nclass Widget extends Gadget {\r\nSprocket s1;\r\nSpring s2;\r\n}\r\n"}],"answer":[1,3]},{"id":44,"description":"Given:\n<code>\nclass Employee {\nString name;\ndouble baseSalary;\nEmployee(String name, double baseSalary) {\nthis.name = name;\nthis.baseSalary = baseSalary;\n}\n}\npublic class SalesPerson extends Employee {\ndouble commission;\npublic SalesPerson(String name, double baseSalary, double commission) {\n// insert code here Line 13\n}\n}\n</code>\nWhich two code fragments, inserted independently at line 13, will compile? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"super(name, baseSalary);"},{"id":2,"text":"this.commission = commission;"},{"id":3,"text":"super(); this.commission = commission;"},{"id":4,"text":"this.commission = commission; super();"},{"id":5,"text":"super(name, baseSalary); this.commission = commission;"}],"answer":[1,5]},{"id":45,"description":"Given:\nabstract class A {\nabstract void a1();\nvoid a2() {\n}\n}\nclass B extends A {\nvoid a1() {\n}\nvoid a2() {\n}\n}\nclass C extends B {\nvoid c1() {\n}\n}\nAnd:\nA x = new B();\nC y = new C();\nA z = new C();\nWhat are four valid examples of polymorphic method calls? (Choose three.)\n","explaination":"","options":[{"id":1,"text":"x.a2();"},{"id":2,"text":"z.a2();"},{"id":3,"text":"y.c1();"},{"id":4,"text":"z.a1();"},{"id":5,"text":"x.a1();"}],"answer":[1,2,5]},{"id":46,"description":"Given:\n<code>\nclass Animal {\npublic String noise() {\nreturn \"peep\";\n}\n}\nclass Dog extends Animal {\npublic String noise() {\nreturn \"bark\";\n}\n}\nclass Cat extends Animal {\npublic String noise() {\nreturn \"meow\";\n}\n} ...\n30. Animal animal = new Dog();\n31. Cat cat = (Cat)animal;\n32. System.out.println(cat.noise());\n</code>\nWhat is the result?\n","explaination":"The above code will throw ClasscastException at runtime because on line 31 animal is type cast to Cat which is actually instance of Dog","options":[{"id":1,"text":"peep"},{"id":2,"text":"bark"},{"id":3,"text":"meow"},{"id":4,"text":"Compilation fails."},{"id":5,"text":"An exception is thrown at runtime."}],"answer":[5]},{"id":47,"description":"Given:\n<code>\n1. public class Target {\n2. private int i = 0;\n3. public int addOne() {\n4. return ++i;\n5. }\n6. }\nAnd:\n1. public class Client {\n2. public static void main(String[] args){\n3. System.out.println(new Target().addOne());\n4. }\n5. }\n</code>\nWhich change can you make to Target without affecting Client?\n","explaination":"","options":[{"id":1,"text":"Line 4 of class Target can be changed to return i++;"},{"id":2,"text":"Line 2 of class Target can be changed to private int i = 1;"},{"id":3,"text":"Line 3 of class Target can be changed to private int addOne(){"},{"id":4,"text":"Line 2 of class Target can be changed to private Integer i = 0;"},{"id":5,"text":""}],"answer":[4]},{"id":48,"description":"Given:\n<code>\nclass Alpha {\npublic void foo() { System.out.print(\"Afoo \"); }\n}\npublic class Beta extends Alpha {\npublic void foo() { System.out.print(\"Bfoo \"); }\npublic static void main(String[] args) {\nAlpha a = new Beta();\nBeta b = (Beta)a;\na.foo();\nb.foo();\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"Afoo Afoo"},{"id":2,"text":"Afoo Bfoo"},{"id":3,"text":"Bfoo Afoo"},{"id":4,"text":"Bfoo Bfoo"},{"id":5,"text":"An exception is thrown at runtime."}],"answer":[4]},{"id":49,"description":"Given a method that must ensure that its parameter is not null:\n<code>\n11. public void someMethod(Object value) {\n12. // check for null value\n...\n20. System.out.println(value.getClass());\n21. }\n</code>\nWhat, inserted at line 12, is the appropriate way to handle a null value?\n","explaination":"assert is not recommended to check method parameters. so only option 4 is correct.","options":[{"id":1,"text":"assert value == null;"},{"id":2,"text":"assert value != null, \"value is null\";"},{"id":3,"text":"if (value == null) { throw new AssertionException(\"value is null\"); }"},{"id":4,"text":"if (value == null) { throw new IllegalArgumentException(\"value is null\"); }"},{"id":5,"text":""}],"answer":[4]},{"id":50,"description":"A team of programmers is involved in reviewing a proposed design for a new utility class.\nAfter some discussion, they realize that the current design allows other classes to access\nmethods in the utility class that should be accessible only to methods within the utility class itself.\nWhat design issue has the team discovered?\n","explaination":"","options":[{"id":1,"text":"Tight coupling"},{"id":2,"text":"Low cohesion"},{"id":3,"text":"High cohesion"},{"id":4,"text":"Loose coupling"},{"id":5,"text":"Weak encapsulation"}],"answer":[5]},{"id":51,"description":"Given:\n<code>\n11. double input = 314159.26;\n12. NumberFormat nf = NumberFormat.getInstance(Locale.ITALIAN);\n13. String b;\n14. //insert code here\n</code>\nWhich code, inserted at line 14, sets the value of b to 314.159,26?\n","explaination":"","options":[{"id":1,"text":"b = nf.parse( input );"},{"id":2,"text":"b = nf.format( input );"},{"id":3,"text":"b = nf.equals( input );"},{"id":4,"text":"b = nf.parseObject( input );"},{"id":5,"text":""}],"answer":[2]},{"id":52,"description":"Given:\n<code>\nimport java.io.*;\nclass Animal {\nAnimal() {\nSystem.out.print(\"a\");\n}\n}\nclass Dog extends Animal implements Serializable {\nDog() {\nSystem.out.print(\"d\");\n}\n}\npublic class Beagle extends Dog {\n}\n</code>\nIf an instance of class Beagle is created, then Serialized, then deSerialized, what is the result?\n","explaination":"","options":[{"id":1,"text":"ad"},{"id":2,"text":"ada"},{"id":3,"text":"add"},{"id":4,"text":"adad"},{"id":5,"text":"Compilation fails."}],"answer":[2]},{"id":53,"description":"Given:\n<code>\n11. String test = \"This is a test\";\n12. String[] tokens = test.split(\"\\s\");\n13. System.out.println(tokens.length);\n</code>\nWhat is the result?\n","explaination":"Invalid escape sequence (valid ones are \\b \\t \\n \\f \\r \\\" \\' \\\\ )\n","options":[{"id":1,"text":"0"},{"id":2,"text":"1"},{"id":3,"text":"4"},{"id":4,"text":"Compilation fails."},{"id":5,"text":"An exception is thrown at runtime."}],"answer":[4]},{"id":54,"description":"Given that c is a reference to a valid java.io.Console object, and:\n<code>\n11. String pw = c.readPassword(\"%s\", \"pw: \");\n12. System.out.println(\"got \" + pw);\n13. String name = c.readLine(\"%s\", \"name: \");\n14. System.out.println(\" got \", name);\n</code>\nIf the user types fido when prompted for a password, and then responds bob when prompted for a name,\nwhat is the result?\n","explaination":"","options":[{"id":1,"text":"pw: got fido name: bob got bob"},{"id":2,"text":"pw: fido got fido name: bob got bob"},{"id":3,"text":"pw: got fido name: bob got bob"},{"id":4,"text":"pw: fido got fido name: bob got bob"},{"id":5,"text":"Compilation fails."}],"answer":[5]},{"id":55,"description":"Which two scenarios are NOT safe to replace a StringBuffer object with a StringBuilder object? (Choose\ntwo.)\n","explaination":"","options":[{"id":1,"text":"When using versions of Java technology earlier than 5.0."},{"id":2,"text":"When sharing a StringBuffer among multiple threads."},{"id":3,"text":"When using the java.io class StringBufferInputStream."},{"id":4,"text":"When you plan to reuse the StringBuffer to build more than one string."},{"id":5,"text":""}],"answer":[1,2]},{"id":56,"description":"Given:\n<code>\n12. Date date = new Date();\n13. df.setLocale(Locale.ITALY);\n14. String s = df.format(date);\n</code>\nThe variable df is an object of type DateFormat that has been initialized in line 11.\nWhat is the result if this code is run on December 14, 2000?\n","explaination":"The method setLocale(Locale) is undefined for the type DateFormat\n","options":[{"id":1,"text":"The value of s is 14-dic-2000."},{"id":2,"text":"The value of s is Dec 14, 2000."},{"id":3,"text":"An exception is thrown at runtime."},{"id":4,"text":"Compilation fails because of an error in line 13."},{"id":5,"text":""}],"answer":[4]},{"id":57,"description":"Given:\n<code>\npublic class Yikes {\npublic static void go(Long n) {\nSystem.out.print(\"Long \");\n}\npublic static void go(Short n) {\nSystem.out.print(\"Short \");\n}\npublic static void go(int n) {\nSystem.out.print(\"int \");\n}\npublic static void main(String[] args) {\nshort y = 6;\nlong z = 7;\ngo(y);\ngo(z);\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"int Long"},{"id":2,"text":"Short Long"},{"id":3,"text":"Compilation fails."},{"id":4,"text":"An exception is thrown at runtime."},{"id":5,"text":""}],"answer":[1]},{"id":58,"description":"Given:\n<code>\n1. public class TestSeven extends Thread {\n2. private static int x;\n3. public synchronized void doThings() {\n4. int current = x;\n5. current++;\n6. x = current;\n7. }\n8. public void run() {\n9. doThings();\n10. }\n11.}\n</code>\nWhich statement is true?\n","explaination":"","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"An exception is thrown at runtime."},{"id":3,"text":"Synchronizing the run() method would make the class thread-safe."},{"id":4,"text":"The data in variable \"x\" are protected from concurrent access problems."},{"id":5,"text":"Declaring the doThings() method as static would make the class thread-safe."}],"answer":[5]},{"id":59,"description":"Given that Triangle implements Runnable, and:\n<code>\nvoid go() throws Exception {\nThread t = new Thread(new Triangle());\nt.start();\nfor(int x = 1; x < 100000; x++) {\n//insert code here Linea 35\nif(x%100 == 0) System.out.print(\"g\");\n}\n}\npublic void run() {\ntry {\nfor(int x = 1; x < 100000; x++) {\n// insert the same code here Linea 41\nif(x%100 == 0) System.out.print(\"t\");\n}\n} catch (Exception e) {\n}\n}\n</code>\nWhich two statements, inserted independently at both lines 35 and 41, tend to allow both threads to\ntemporarily pause and allow the other thread to execute? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"Thread.wait();"},{"id":2,"text":"Thread.join();"},{"id":3,"text":"Thread.yield();"},{"id":4,"text":"Thread.sleep(1);"},{"id":5,"text":"Thread.notify();"}],"answer":[3,4]},{"id":60,"description":"Given:\n<code>\npublic class NamedCounter {\nprivate final String name;\nprivate int count;\npublic NamedCounter(String name) {\nthis.name = name;\n}\npublic String getName() {\nreturn name;\n}\npublic void increment() {\ncount++;\n}\npublic int getCount() {\nreturn count;\n}\npublic void reset() {\ncount = 0;\n}\n}\n</code>\nWhich three changes should be made to adapt this class to be used safely by multiple threads? (Choose\nthree.)\n","explaination":"","options":[{"id":1,"text":"declare reset() using the synchronized keyword"},{"id":2,"text":"declare getName() using the synchronized keyword"},{"id":3,"text":"declare getCount() using the synchronized keyword"},{"id":4,"text":"declare the constructor using the synchronized keyword"},{"id":5,"text":"declare increment() using the synchronized keyword"}],"answer":[1,3,5]},{"id":61,"description":"Given:\n<code>\n1. public class Threads3 implements Runnable {\n2. public void run() {\n3. System.out.print(\"running\");\n4. }\n5. public static void main(String[] args) {\n6. Thread t = new Thread(new Threads3());\n7. t.run();\n8. t.run();\n9. t.start();\n10. }\n11.}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"An exception is thrown at runtime."},{"id":3,"text":"The code executes and prints \"running\"."},{"id":4,"text":"The code executes and prints \"runningrunning\"."},{"id":5,"text":"The code executes and prints \"runningrunningrunning\"."}],"answer":[5]},{"id":62,"description":"Given:\n<code>\n1. public class TestOne {\n2. public static void main (String[] args) throws Exception {\n3. Thread.sleep(3000);\n4. System.out.println(\"sleep\");\n5. }\n6. }\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"An exception is thrown at runtime."},{"id":3,"text":"The code executes normally and prints \"sleep\"."},{"id":4,"text":"The code executes normally, but nothing is printed."},{"id":5,"text":""}],"answer":[3]},{"id":63,"description":"Given:\n<code>\nclass Alpha {\npublic void foo() { System.out.print(\"Afoo \"); }\n}\npublic class Beta extends Alpha {\npublic void foo() { System.out.print(\"Bfoo \"); }\npublic static void main(String[] args) {\nAlpha a = new Beta();\nBeta b = (Beta)a;\na.foo();\nb.foo();\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"Afoo Afoo"},{"id":2,"text":"Afoo Bfoo"},{"id":3,"text":"Bfoo Afoo"},{"id":4,"text":"Bfoo Bfoo"},{"id":5,"text":"Compilation fails."}],"answer":[4]},{"id":64,"description":"Given:\n<code>\npublic interface A111 {\nString s = \"yo\";\npublic void method1();\n}\ninterface B {\n}\ninterface C extends A111, B {\npublic void method1();\npublic void method1(int x);\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"Compilation succeeds."},{"id":2,"text":"Compilation fails due to multiple errors."},{"id":3,"text":"Compilation fails due to an error only on line 20."},{"id":4,"text":"Compilation fails due to an error only on line 21."},{"id":5,"text":"Compilation fails due to an error only on line 22."}],"answer":[1]},{"id":65,"description":"<code>\n1. public class GoTest {\n2. public static void main(String[] args) {\n3. Sente a = new Sente(); a.go();\n4. Goban b = new Goban(); b.go();\n5. Stone c = new Stone(); c.go();\n6. }\n7. }\n8.\n9. class Sente implements Go {\n10. public void go(){\n11. System.out.println(\"go in Sente\");\n12. }\n13.}\n14.\n15.class Goban extends Sente {\n16. public void go(){\n17. System.out.println(\"go in Goban\");\n18. }\n19.\n20.}\n21.class Stone extends Goban implements Go{\n22.}\n23.\n24.interface Go { public void go(); }\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"go in Goban go in Sente go in Sente"},{"id":2,"text":"go in Sente go in Sente go in Goban"},{"id":3,"text":"go in Sente go in Goban go in Goban"},{"id":4,"text":"go in Goban go in Goban go in Sente"},{"id":5,"text":"Compilation fails because of an error in line 17."}],"answer":[3]},{"id":66,"description":"Given:\n<code>\n1. public class Plant {\n2. private String name;\n3.\n4. public Plant(String name) {\n5. this.name = name;\n6. }\n7.\n8. public String getName() {\n9. return name;\n10. }\n11.}\n1. public class Tree extends Plant {\n2. public void growFruit() {\n3. }\n4.\n5. public void dropLeaves() {\n6. }\n7. }\n</code>\nWhich statement is true?\n","explaination":"","options":[{"id":1,"text":"The code will compile without changes."},{"id":2,"text":"The code will compile if public Tree() { Plant(); } is added to the Tree class."},{"id":3,"text":". The code will compile if public Plant() { Tree(); } is added to the Plant class."},{"id":4,"text":"The code will compile if public Plant() { this(\"fern\"); } is added to the Plant class."},{"id":5,"text":"The code will compile if public Plant() { Plant(\"fern\"); } is added to the Plant class."}],"answer":[4]},{"id":67,"description":"Which two code fragments correctly create and initialize a static array of int elements? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"static final int[] a = { 100,200 };"},{"id":2,"text":"static final int[] a; static { a=new int[2]; a[0]=100; a[1]=200; }"},{"id":3,"text":"static final int[] a = new int[2]{ 100,200 };"},{"id":4,"text":"static final int[] a;\r\nstatic void init() { a = new int[3]; a[0]=100; a[1]=200; }\r\n"},{"id":5,"text":""}],"answer":[1,2]},{"id":68,"description":"1. public class A {\n2. public String doit(int x, int y){\n3. return \"a\";\n4. }\n5.\n6. public String doit(int... vals){\n7. return \"b\";\n8. }\n9. }\n\nGiven:\n25. A a = new A();\n26. System.out.println(a.doit(4, 5));\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"Line 26 prints \"a\" to System.out."},{"id":2,"text":"Line 26 prints \"b\" to System.out."},{"id":3,"text":"An exception is thrown at line 26 at runtime."},{"id":4,"text":"Compilation of class A will fail due to an error in line 6."},{"id":5,"text":""}],"answer":[1]},{"id":69,"description":"Given:\n<code>\nclass Converter {\npublic static void main(String[] args) {\nInteger i = args[0]; // line 13\nint j = 12;\nSystem.out.println(\"It is \" + (j == i) + \" that j==i.\");\n}\n}\n</code>\nWhat is the result when the programmer attempts to compile the code and run it with the command java\nConverter 12?\n","explaination":"","options":[{"id":1,"text":"It is true that j==i."},{"id":2,"text":"It is false that j==i."},{"id":3,"text":"An exception is thrown at runtime."},{"id":4,"text":"Compilation fails because of an error in line 13."},{"id":5,"text":""}],"answer":[4]},{"id":70,"description":"Given:\n<code>\n1. public class KungFu {\n2. public static void main(String[] args) {\n3. Integer x = 400;\n4. Integer y = x;\n5. x++;\n6. StringBuilder sb1 = new StringBuilder(\"123\");\n7. StringBuilder sb2 = sb1;\n8. sb1.append(\"5\");\n9. System.out.println((x == y) + \" \" + (sb1 == sb2));\n10. }\n11.}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"true true"},{"id":2,"text":"false true"},{"id":3,"text":"true false"},{"id":4,"text":"false false"},{"id":5,"text":"Compilation fails."}],"answer":[2]},{"id":71,"description":"Given:\n<code>\n33. Date d = new Date(0);\n34. String ds = \"December 15, 2004\";\n35. // insert code here\n36. try {\n37. d = df.parse(ds);\n38. }\n39. catch(ParseException e) {\n40. System.out.println(\"Unable to parse \" + ds);\n41. }\n42. // insert code here too\n</code>\nWhat creates the appropriate DateFormat object and adds a day to the Date object?\n","explaination":"","options":[{"id":1,"text":"35. DateFormat df = DateFormat.getDateFormat();\r\n42. d.setTime( (60 * 60 * 24) + d.getTime());\r\n"},{"id":2,"text":"35. DateFormat df = DateFormat.getDateInstance();\r\n42. d.setTime( (1000 * 60 * 60 * 24) + d.getTime());\r\n"},{"id":3,"text":"35. DateFormat df = DateFormat.getDateFormat();\r\n42. d.setLocalTime( (1000*60*60*24) + d.getLocalTime());\r\n"},{"id":4,"text":"35. DateFormat df = DateFormat.getDateInstance();\r\n42. d.setLocalTime( (60 * 60 * 24) + d.getLocalTime());\r\n"},{"id":5,"text":""}],"answer":[2]},{"id":72,"description":"Given:\n<code>\n11. String test = \"a1b2c3\";\n12. String[] tokens = test.split(\"\\\\d\");\n13. for(String s: tokens) System.out.print(s + \" \");\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"a b c"},{"id":2,"text":"1 2 3"},{"id":3,"text":"a1b2c3"},{"id":4,"text":"a1 b2 c3"},{"id":5,"text":"Compilation fails."}],"answer":[1]},{"id":73,"description":"Given that c is a reference to a valid java.io.Console object, which two code fragments read a line of text\nfrom the console? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"String s = c.readLine();"},{"id":2,"text":"char[] c = c.readLine();"},{"id":3,"text":"String s = c.readConsole();"},{"id":4,"text":"char[] c = c.readConsole();"},{"id":5,"text":"String s = c.readLine(\"%s\", \"name \");"}],"answer":[5]},{"id":74,"description":"Given:\n<code>\n12. String csv = \"Sue,5,true,3\";\n13. Scanner scanner = new Scanner( csv );\n14. scanner.useDelimiter(\",\");\n15. int age = scanner.nextInt();\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"After line 15, the value of age is 5."},{"id":3,"text":"After line 15, the value of age is 3."},{"id":4,"text":"An exception is thrown at runtime."},{"id":5,"text":""}],"answer":[4]},{"id":75,"description":"Which three statements concerning the use of the java.io.Serializable interface are true? (Choose three.)\n","explaination":"","options":[{"id":1,"text":"Objects from classes that use aggregation cannot be serialized."},{"id":2,"text":"An object serialized on one JVM can be successfully deserialized on a different JVM."},{"id":3,"text":"The values in fields with the volatile modifier will NOT survive serialization and deserialization."},{"id":4,"text":"The values in fields with the transient modifier will NOT survive serialization and deserialization."},{"id":5,"text":"It is legal to serialize an object of a type that has a supertype that does NOT implement java.io.\r\nSerializable.\r\n"}],"answer":[2,4,5]},{"id":76,"description":"Given:\n<code>\nNumberFormat nf = NumberFormat.getInstance();\nnf.setMaximumFractionDigits(4);\nnf.setMinimumFractionDigits(2);\nString a = nf.format(3.1415926);\nString b = nf.format(2);\n</code>\nWhich two statements are true about the result if the default locale is Locale.US? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"The value of b is 2."},{"id":2,"text":"The value of a is 3.14."},{"id":3,"text":"The value of b is 2.00."},{"id":4,"text":"The value of a is 3.141."},{"id":5,"text":"The value of a is 3.1416."}],"answer":[3,5]},{"id":77,"description":"Given that the current directory is empty, and that the user has read and write privileges to the current\ndirectory, and the following:\n<code>\n1. import java.io.*;\n2. public class Maker {\n3. public static void main(String[] args) {\n4. File dir = new File(\"dir\");\n5. File f = new File(dir, \"f\");\n6. }\n7. }\n</code>\nWhich statement is true?\n","explaination":"","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"Nothing is added to the file system."},{"id":3,"text":"Only a new file is created on the file system."},{"id":4,"text":"Only a new directory is created on the file system."},{"id":5,"text":"Both a new file and a new directory are created on the file system."}],"answer":[2]},{"id":78,"description":"Given:\n<code>\n1. public class TestSeven extends Thread {\n2. private static int x;\n3. public synchronized void doThings() {\n4. int current = x;\n5. current++;\n6. x = current;\n7. }\n8. public void run() {\n9. doThings();\n10. }\n11.}\n</code>\nWhich statement is true?\n","explaination":"","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"An exception is thrown at runtime."},{"id":3,"text":"Synchronizing the run() method would make the class thread-safe."},{"id":4,"text":"The data in variable \"x\" are protected from concurrent access problems."},{"id":5,"text":"Declaring the doThings() method as static would make the class thread-safe."}],"answer":[5]},{"id":79,"description":"Given:\n<code>\nclass Foo {\nstatic void alpha() {\n/* more code here */\n}\nvoid beta() {\n/* more code here */\n}\n}\n</code>\nWhich two statements are true? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"Foo.beta() is a valid invocation of beta()."},{"id":2,"text":"Foo.alpha() is a valid invocation of alpha()."},{"id":3,"text":"Method beta() can directly call method alpha()."},{"id":4,"text":"Method alpha() can directly call method beta()."},{"id":5,"text":""}],"answer":[2,3]},{"id":80,"description":"Given:\n<code>\n1. package com.company.application;\n2.\n3. public class MainClass {\n4. public static void main(String[] args) {\n5. }\n6. }\n</code>\nAnd MainClass exists in the /apps/com/company/application directory.\nAssume the CLASSPATH environment variable is set to \".\" (current directory).\nWhich two java commands entered at the command line will run MainClass? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"java MainClass if run from the /apps directory"},{"id":2,"text":"java com.company.application.MainClass if run from the /apps directory"},{"id":3,"text":"java -classpath /apps com.company.application.MainClass if run from any directory"},{"id":4,"text":"java -classpath . MainClass if run from the /apps/com/company/application directory"},{"id":5,"text":"java -classpath /apps/com/company/application:. MainClass if run from the /apps directory"}],"answer":[2,3]},{"id":81,"description":"Given:\n<code>\ninterface Fish {\n}\nclass Perch implements Fish {\n}\nclass Walleye extends Perch {\n}\nclass Bluegill {\n}\npublic class Fisherman {\npublic static void main(String[] args) {\nFish f = new Walleye();\nWalleye w = new Walleye();\nBluegill b = new Bluegill();\nif (f instanceof Perch)\nSystem.out.print(\"f-p \");\nif (w instanceof Fish)\nSystem.out.print(\"w-f \");\nif (b instanceof Fish)\nSystem.out.print(\"b-f \");\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"w-f"},{"id":2,"text":"f-p w-f"},{"id":3,"text":"w-f b-f"},{"id":4,"text":"f-p w-f b-f"},{"id":5,"text":"Compilation fails"}],"answer":[2]},{"id":82,"description":"1. package packageA;\n2. public class Message {\n3. String getText() {\n4. return \"text\";\n5. }\n6. }\nAnd:\n<code>\n1. package packageB;\n2.\n3. public class XMLMessage extends packageA.Message {\n4. String getText() {\n5. return \"<msg>text</msg>\";\n6. }\n7.\n8. public static void main(String[] args) {\n9. System.out.println(new XMLMessage().getText());\n10. }\n11.}\n</code>\nWhat is the result of executing XMLMessage.main?\n","explaination":"","options":[{"id":1,"text":"text"},{"id":2,"text":"Compilation fails."},{"id":3,"text":"<msg>text</msg>"},{"id":4,"text":"An exception is thrown at runtime."},{"id":5,"text":""}],"answer":[3]},{"id":83,"description":"Given:\n\nclass Foo {\nprivate int x;\npublic Foo( int x ){ this.x = x;}\npublic void setX( int x ) { this.x = x; }\npublic int getX(){ return x;}\n}\npublic class Gamma {\nstatic Foo fooBar(Foo foo) {\nfoo = new Foo(100);\nreturn foo;\n}\npublic static void main(String[] args) {\nFoo foo = new Foo( 300 );\nSystem.out.println( foo.getX() + \"-\");\nFoo fooFoo = fooBar(foo);\nSystem.out.println(foo.getX() + \"-\");\nSystem.out.println(fooFoo.getX() + \"-\");\nfoo = fooBar( fooFoo);\nSystem.out.println( foo.getX() + \"-\");\nSystem.out.println(fooFoo.getX());\n}\n}\n\nWhat is the output?","explaination":"","options":[{"id":1,"text":"300-100-100-100-100"},{"id":2,"text":"300-300-100-100-100"},{"id":3,"text":"300-300-300-100-100"},{"id":4,"text":"300-300-300-300-100"},{"id":5,"text":""}],"answer":[2]},{"id":84,"description":"Given:\n<code>\npublic class Yippee {\npublic static void main(String[] args) {\nfor (int x = 1; x < args.length; x++) {\nSystem.out.print(args[x] + \" \");\n}\n}\n}\n</code>\nand two separate command line invocations: java Yippee java Yippee 1 2 3 4\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"No output is produced. 1 2 3"},{"id":2,"text":"No output is produced. 2 3 4"},{"id":3,"text":"No output is produced. 1 2 3 4"},{"id":4,"text":"An exception is thrown at runtime. 1 2 3"},{"id":5,"text":"An exception is thrown at runtime. 2 3 4"}],"answer":[2]},{"id":85,"description":"<code>\npublic class Commander {\npublic static void main(String[] args) {\nString myProp = /* insert code here Linea 13 */\nSystem.out.println(myProp);\n}\n}\n</code>\nand the command line: java -Dprop.custom=gobstopper Commander\nWhich two, placed on line 13, will produce the output gobstopper? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"System.load(\"prop.custom\");"},{"id":2,"text":"System.getenv(\"prop.custom\");"},{"id":3,"text":"System.property(\"prop.custom\");"},{"id":4,"text":"System.getProperty(\"prop.custom\");"},{"id":5,"text":"System.getProperties().getProperty(\"prop.custom\");"}],"answer":[4,5]},{"id":86,"description":"Given:\n\npublic class Tahiti {\nTahiti t;\npublic static void main(String[] args) {\nTahiti t = new Tahiti();\nTahiti t2 = t.go(t);\nt2 = null;\n// more code here 11\n}\nTahiti go(Tahiti t) {\nTahiti t1 = new Tahiti();\nTahiti t2 = new Tahiti();\nt1.t = t2;\nt2.t = t1;\nt.t = t2;\nreturn t1;\n}\n}\nWhen line 11 is reached, how many objects are eligible for garbage collection?\n","explaination":"","options":[{"id":1,"text":"0"},{"id":2,"text":"1"},{"id":3,"text":"2"},{"id":4,"text":"3"},{"id":5,"text":"Compilation fails."}],"answer":[1]},{"id":87,"description":"Given:\n<code>\npublic static void main(String[] args) {\nInteger i = new Integer(1) + new Integer(2);\nswitch(i) {\ncase 3: System.out.println(\"three\"); break;\ndefault: System.out.println(\"other\"); break;\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"three"},{"id":2,"text":"other"},{"id":3,"text":"An exception is thrown at runtime."},{"id":4,"text":"Compilation fails because of an error on line 12."},{"id":5,"text":"Compilation fails because of an error on line 13."}],"answer":[1]},{"id":88,"description":"Which two code fragments are most likely to cause a StackOverflowError? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"int []x = {1,2,3,4,5};\r\nfor(int y = 0; y < 6; y++)\r\nSystem.out.println(x[y]);\r\n"},{"id":2,"text":"static int[] x = {7,6,5,4};\r\nstatic { x[1] = 8;\r\nx[4] = 3; }\r\n"},{"id":3,"text":"for(int y = 10; y < 10; y++)\r\ndoStuff(y);\r\n"},{"id":4,"text":"void doOne(int x) { doTwo(x); }\r\nvoid doTwo(int y) { doThree(y); }\r\nvoid doThree(int z) { doTwo(z); }\r\n"},{"id":5,"text":"void counter(int i) { counter(++i); }"}],"answer":[4,5]},{"id":89,"description":"Given:\n<code>\npublic static void main(String[] args) {\ntry {\nargs = null;\nargs[0] = \"test\";\nSystem.out.println(args[0]);\n} catch (Exception ex) {\nSystem.out.println(\"Exception\");\n} catch (NullPointerException npe) {\nSystem.out.println(\"NullPointerException\");\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"test"},{"id":2,"text":"Exception"},{"id":3,"text":"Compilation fails."},{"id":4,"text":"NullPointerException"},{"id":5,"text":""}],"answer":[3]},{"id":90,"description":"Given:\n<code>\npublic class Breaker {\nstatic String o = \"\";\npublic static void main(String[] args) {\nz: o = o + 2;\nfor (int x = 3; x < 8; x++) {\nif (x == 4)\nbreak;\nif (x == 6)\nbreak z;\no = o + x;\n}\nSystem.out.println(o);\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"23"},{"id":2,"text":"234"},{"id":3,"text":"235"},{"id":4,"text":"2345"},{"id":5,"text":"Compilation fails."}],"answer":[5]},{"id":91,"description":"Given:\n<code>\ntry {\nResourceConnection con = resourceFactory.getConnection();\nResults r = con.query(\"GET INFO FROM CUSTOMER\"); // Linea 86\ninfo = r.getData(); 88. con.close();\n} catch (ResourceException re) {\nerrorLog.write(re.getMessage());\n}\nreturn info;\n</code>\nWhich statement is true if a ResourceException is thrown on line 86?\n","explaination":"","options":[{"id":1,"text":"Line 92 will not execute."},{"id":2,"text":"The connection will not be retrieved in line 85."},{"id":3,"text":"The resource connection will not be closed on line 88."},{"id":4,"text":"The enclosing method will throw an exception to its caller."},{"id":5,"text":""}],"answer":[3]},{"id":92,"description":"Given:\n<code>\n1. import java.util.*;\n2. public class Example {\n3. public static void main(String[] args) {\n4. // insert code here\n5. set.add(new Integer(2));\n6. set.add(new Integer(1));\n7. System.out.println(set);\n8. }\n9. }\n</code>\nWhich code, inserted at line 4, guarantees that this program will output [1, 2]?\n","explaination":"","options":[{"id":1,"text":"Set set = new TreeSet();"},{"id":2,"text":"Set set = new HashSet();"},{"id":3,"text":"Set set = new SortedSet();"},{"id":4,"text":"List set = new SortedList();"},{"id":5,"text":"Set set = new LinkedHashSet();"}],"answer":[1,2]},{"id":93,"description":"A programmer must create a generic class MinMax and the type parameter of MinMax must implement\nComparable.\nWhich implementation of MinMax will compile?\n","explaination":"","options":[{"id":1,"text":"class MinMax<E extends Comparable<E>> {\r\nE min = null;\r\nE max = null;\r\npublic MinMax() {}\r\npublic void put(E value) { /* store min or max */ }\r\n"},{"id":2,"text":"class MinMax<E implements Comparable<E>> {\r\nE min = null;\r\nE max = null;\r\npublic MinMax() {}\r\npublic void put(E value) { /* store min or max */ }\r\n"},{"id":3,"text":"class MinMax<E extends Comparable<E>> {\r\n<E> E min = null;\r\n<E> E max = null;\r\npublic MinMax() {}\r\npublic <E> void put(E value) { /* store min or max */ }\r\n"},{"id":4,"text":"class MinMax<E implements Comparable<E>> {\r\n<E> E min = null;\r\n<E> E max = null;\r\npublic MinMax() {}\r\npublic <E> void put(E value) { /* store min or max */ }\r\n"},{"id":5,"text":""}],"answer":[1]},{"id":94,"description":"Given:\n<code>\npublic class Drink implements Comparable {\npublic String name;\npublic int compareTo(Object o) {\nreturn 0;\n}\n}\nand:\nDrink one = new Drink();\nDrink two = new Drink();\none.name= \"Coffee\";\ntwo.name= \"Tea\";\nTreeSet set = new TreeSet();\nset.add(one);\nset.add(two);\n</code>\nA programmer iterates over the TreeSet and prints the name of each Drink object.\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"Tea"},{"id":2,"text":"Coffee"},{"id":3,"text":"Coffee\r\nTea\r\n"},{"id":4,"text":"Compilation fails."},{"id":5,"text":"An exception is thrown at runtime."}],"answer":[2]},{"id":95,"description":"Given:\n<code>\nimport java.util.TreeSet;\npublic class Explorer2 {\npublic static void main(String[] args) {\nTreeSet<Integer> s = new TreeSet<Integer>();\nTreeSet<Integer> subs = new TreeSet<Integer>();\nfor(int i = 606; i < 613; i++)\nif(i%2 == 0) s.add(i);\nsubs = (TreeSet)s.subSet(608, true, 611, true);\ns.add(629);\nSystem.out.println(s + \" \" + subs);\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"Compilation fails."},{"id":2,"text":"An exception is thrown at runtime."},{"id":3,"text":"[608, 610, 612, 629] [608, 610]"},{"id":4,"text":"[608, 610, 612, 629] [608, 610, 629]"},{"id":5,"text":"[606, 608, 610, 612, 629] [608, 610]"}],"answer":[5]},{"id":96,"description":"Given:\n<code>\npublic class Person {\nprivate name;\npublic Person(String name) {\nthis.name = name;\n}\npublic int hashCode() {\nreturn 420;\n}\n}\n</code>\nWhich statement is true?\n","explaination":"","options":[{"id":1,"text":"The time to find the value from HashMap with a Person key depends on the size of the map."},{"id":2,"text":"Deleting a Person key from a HashMap will delete all map entries for all keys of type Person."},{"id":3,"text":"Inserting a second Person object into a HashSet will cause the first Person object to be removed as a duplicate.\r\n"},{"id":4,"text":"The time to determine whether a Person object is contained in a HashSet is constant and does NOT\r\ndepend on the size of the map. "},{"id":5,"text":""}],"answer":[1]},{"id":97,"description":"Given:\n<code>\nimport java.util.*;\npublic class SortOf {\npublic static void main(String[] args) {\nArrayList<Integer> a = new ArrayList<Integer>();\na.add(1); a.add(5); a.add(3);\nCollections.sort(a);\na.add(2);\nCollections.reverse(a);\nSystem.out.println(a);\n}\n}\n</code>\nWhat is the result?\n","explaination":"","options":[{"id":1,"text":"[1, 2, 3, 5]"},{"id":2,"text":"[2, 1, 3, 5]"},{"id":3,"text":"[2, 5, 3, 1]"},{"id":4,"text":"[5, 3, 2, 1]"},{"id":5,"text":"[1, 3, 5, 2]"}],"answer":[3]},{"id":98,"description":"Given:\n<code>\npublic class Person {\nprivate String name;\npublic Person(String name) {\nthis.name = name;\n}\npublic boolean equals(Object o) {\nif ( ! ( o instanceof Person) ) return false;\nPerson p = (Person) o;\nreturn p.name.equals(this.name);\n}\n}\n</code>\nWhich statement is true?\n","explaination":"","options":[{"id":1,"text":"Compilation fails because the hashCode method is not overridden."},{"id":2,"text":"A HashSet could contain multiple Person objects with the same name."},{"id":3,"text":"All Person objects will have the same hash code because the hashCode method is not overridden."},{"id":4,"text":"If a HashSet contains more than one Person object with name=\"Fred\", then removing another Person,\r\nalso with name=\"Fred\", will remove them all.\r\n"},{"id":5,"text":""}],"answer":[2]},{"id":99,"description":"Which two code fragments will execute the method doStuff() in a separate thread? (Choose two.)\n","explaination":"","options":[{"id":1,"text":"new Thread() {\r\npublic void run() { doStuff(); }\r\n};\r\n"},{"id":2,"text":"new Thread() {\r\npublic void start() { doStuff(); }\r\n};\r\n"},{"id":3,"text":"new Thread() {\r\npublic void start() { doStuff(); }\r\n}.run();\r\n"},{"id":4,"text":"new Thread() {\r\npublic void run() { doStuff(); }\r\n}.start();\r\n"},{"id":5,"text":"new Thread(new Runnable() {\r\npublic void run() { doStuff(); }\r\n}).start();\r\n"}],"answer":[4,5]}]